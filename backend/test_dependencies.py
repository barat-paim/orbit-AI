import numpy as np
import pandas as pd
import matplotlib
matplotlib.use('Agg')  # Set non-interactive backend
import matplotlib.pyplot as plt
import seaborn as sns
import scipy.stats as stats
from scipy import optimize, interpolate
import json
from datetime import datetime, timedelta

def test_code_execution_environment():
    """Test the exact environment used by the FastAPI server for code execution"""
    print("Testing code execution environment...")
    
    # Create sample data similar to what the server uses
    data = [
        {"time": 1734371573.238, "wpm": 87.04, "accuracy": 0.98},
        {"time": 1734371515.965, "wpm": 87.97, "accuracy": 0.99}
    ]
    df = pd.DataFrame(data)
    df['timestamp'] = pd.to_datetime(df['time'], unit='s')
    
    # Test code that might be generated by Claude
    test_code = """
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats

# Calculate basic statistics
mean_wpm = df['wpm'].mean()
std_wpm = df['wpm'].std()

# Create a visualization
plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x='timestamp', y='wpm')
plt.title('WPM over Time')
plt.close()

# Perform statistical test
stat, p_value = stats.normaltest(df['wpm'])

result = {
    'mean_wpm': mean_wpm,
    'std_wpm': std_wpm,
    'normality_test_p_value': p_value
}
"""
    
    try:
        # Setup execution environment like the server does
        local_ns = {
            'pd': pd,
            'df': df,
            'plt': plt,
            'sns': sns,
            'np': np,
            'stats': stats,
            'result': None
        }
        
        # Execute code
        exec(test_code, local_ns)
        print("Code execution successful!")
        print("Results:", local_ns.get('result', None))
        
    except Exception as e:
        print("Code execution failed:", str(e))
        return False
    
    return True

def test_all_dependencies():
    # First test the server's code execution environment
    print("Testing FastAPI server code execution environment...")
    if not test_code_execution_environment():
        return "Server code execution environment test failed!"
    
    # Basic array operations
    print("\nTesting NumPy array operations...")
    arr = np.array([1, 2, 3, 4, 5])
    matrix = np.array([[1, 2], [3, 4]])
    print("Matrix multiplication:", np.dot(matrix, matrix))
    print("Array operations successful")
    
    # Advanced NumPy operations
    print("\nTesting advanced NumPy features...")
    random_data = np.random.normal(0, 1, 1000)
    fft_result = np.fft.fft(random_data)
    print("FFT shape:", fft_result.shape)
    print("Advanced NumPy features successful")
    
    # Pandas operations
    print("\nTesting Pandas operations...")
    dates = pd.date_range(start='2024-01-01', periods=5, freq='D')
    df = pd.DataFrame({
        'date': dates,
        'A': np.random.randn(5),
        'B': np.random.randn(5),
        'category': ['X', 'Y', 'X', 'Y', 'X']
    })
    grouped = df.groupby('category')['A'].mean()
    print("GroupBy result:\n", grouped)
    df.set_index('date', inplace=True)
    print("Rolling mean:\n", df['A'].rolling(window=2).mean())
    print("Pandas operations successful")
    
    # SciPy operations
    print("\nTesting SciPy operations...")
    t_stat, p_val = stats.ttest_ind(df['A'], df['B'])
    print("T-test p-value:", p_val)
    def f(x): return (x[0] - 1)**2 + (x[1] - 2)**2
    result = optimize.minimize(f, [0, 0])
    print("Optimization successful:", result.success)
    x = np.linspace(0, 4, 5)
    y = np.exp(-x/3.0)
    f = interpolate.interp1d(x, y)
    print("Interpolation successful")
    print("SciPy operations successful")
    
    # Matplotlib and Seaborn visualizations
    print("\nTesting visualization libraries...")
    plt.figure(figsize=(12, 8))
    plt.subplot(2, 2, 1)
    sns.regplot(data=df.reset_index(), x='A', y='B')
    plt.subplot(2, 2, 2)
    df['A'].plot()
    plt.subplot(2, 2, 3)
    sns.histplot(data=df, x='A', kde=True)
    plt.subplot(2, 2, 4)
    sns.boxplot(data=df.reset_index(), x='category', y='A')
    plt.tight_layout()
    plt.close()
    print("Visualization tests successful")
    
    # File I/O operations
    print("\nTesting file I/O operations...")
    df.to_csv('test.csv')
    df_read = pd.read_csv('test.csv', index_col=0)
    with open('test.json', 'w') as f:
        json.dump({'test': 'data'}, f)
    print("File I/O operations successful")
    
    # Cleanup test files
    import os
    os.remove('test.csv')
    os.remove('test.json')
    
    return "All dependency tests completed successfully!"

if __name__ == "__main__":
    result = test_all_dependencies()
    print("\nFinal Result:", result) 